Sassifying QHotels


1. The Challenge

To convert 10,764 lines of CSS in eqtr_style.less to Sass


2. Why Do It?

(i) Size: the Equator styles were unminified, using Less but not really using it, had lots of duplication and separation of styles (e.g. CSS3 styles in a separate group)

(ii) Manageability: the Equator stylesheet was already big and we were compounding the problem by adding additional styles at the bottom as we went along. Separating out different sections would make it easier to find the correct styles to amend or add to.

(iii) Future-proofing: If and when the time comes to rebuild the QHotels site, these separate styles could be replaced piecemeal, rather than starting from scratch. Although this might feel like rearranging deckchairs on the Titanic...

(iv) Sanity: Using variables for colours and fonts, extends for recurring styles and so on means that different devs don't have to search around for existing styles, and hopefully won't duplicate work that already exists.



3. Approach

(0) Build process

(i) Replace colours and fonts

(ii) Separate files

(iii) Nest rules

(iv) Combine rules

(v) Add extends and includes



4. Build process

As it's Sass, it needs compiling.

We love Grunt, and have a decent setup, so I installed Grunt and a few other modules to do compiling, autoprefixing, minifying etc.



5. Variables - Fonts

Fairly simple - find all the occurrences of font-family. Some inconsistencies smoothed out and all fonts now use a font variable like "$font-sans-book"



6. Variables - Colours

First challenge was to find all the colours in the stylesheet. Step forward colorguard by Alex Sexton. Node package that analyses CSS files for colours, reports on any similarities (too many to be useful), and gives a list of colours. I took this list, added it to an Excel doc, and with a bit of magic did a bit of analysis.

N.B. Colorguard doesn't distinguish between rgba(0,0,0,0.1), rgba(0,0,0,0.5) and rgba(0,0,0,0.9) - they all match to #000



7. Variables - Colour Results

There were ***138*** individual colours. ***113*** of them appeared just once.

There were 51 Shades of Grey.

Of the others, a lot appeared just to be slightly different variants of purple.

I decided to narrow down the colour variables to colours that appeared in double figures. The rest I left in the CSS. We should consolidate these later, but for now they can stay where they are.



8. Variables - Colour maps

Sass Maps are a new thing in Sass 3.3 (we're now on 3.4, so update your version if you haven't already). They're essentially like a hash or an object, so you can group together variables of the same type, to use later.

There is a variable called $palettes, which has a properties purple, brown, blue and gray.

Each of these properties is its own Sass map, with up to 7 properties ranging from x-light to x-dark. I think 7 shades of a colour should be enough!

You can call these properties by using map-get($palettes, purple). But since map-get(map-get($palettes, purple), light) is a bit cumbersome, there's a mixin (like a Sass function), where you pass a color (e.g. purple) and a tone (e.g. mid-light) and it returns a hex ref.



9. End of Part One

After replacing all these, the compiled CSS still looks very similar to the Equator styles, which means that hopefully so far we've done a good job. The colours that remain in the Sass code should probably be replaced or variablised.

So after all that work, we're back to where we started. 10,000 lines of CSS. So now it's time to make that a bit more manageable.



10. Splitting the File

To give them their due, the developers at Equator had a well-commented CSS file that was organised into separate sections. This made it much easier to split into different files.

I followed the rough setup that Griff and I had spoken about and that I extended for West Herts

core - 7 files (mostly my own, including reset, variables, extends, fonts and base styles)
components - 22 files (buttons, datepicker, modal, sort-pagination...)
layout - 11 files (site-header, site-navigation, footer, sitemap..)
templates - 3 files specific to one or a few pages (one-big-deal, leisure [would put weddings in here])
media - 5 files (tablet, small-tablet, mobile, small-mobile, misc)
print (print styles. Could go in media)
fallbacks (.no-csstransforms, .no-svg etc. nothing in here... yet)
overrides (because some styles just _have_ to go last)

51 separate files! (so approx 200 lines per file. Sounds about right)

BUT... It should be much easier for developers to go in to the right section to update or amend styles.



11. Nest rules

Makes files easier to read, makes sure specificity is maintained.

There are some good tools out there, but they're pretty dumb. e.g. http://csstoss.com/ which I used for a few simple chunks.

N.B. Complex selectors don't slow down pages much. Don't worry about using 5 or 6 selectors if needed. Browser selector process is so quick that JS and page size is much more likely to be an issue.

Overnesting can cause problems with specificity especially in media queries (e.g. if you have .a .b .c {} in main stylesheet, it won't be overwritten by .c {} in media query)



12. Extend and combine rules

I noticed that a lot of the filters (location filter, experience filter, blog filter, offers filter) were all using very similar CSS, so I added a %default-filter class and extended it acrss all the filters, overwriting where necessary.

There are probably a lot more places this could be used - whether it's reused backgrounds, or a style for sidebars, or text styles that repeat throughout the site.



13. Well that went OK

Not too much wrong - missed print media query initially...

A few tweaks where things were more or less specific than in Equator's styles

Odd to spend so long doing something that, if it works well, makes no discernible difference.

BUT... eqtr_style.less 143KB minified
styles.min.css 130KB minified.

10% saving!



14. What would I do differently?

Get to know the site better first, so extends would follow naturally from the UI units on screen.

Sit with a designer to go through colours especially

Make more decisions to get rid of rubbish




15. Who's next?

Slater and Gordon
Callcredit
Safestyle
